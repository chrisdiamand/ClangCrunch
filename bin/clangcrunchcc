#!/usr/bin/env python

# Compiler wrapper for libcrunch.
import os
import subprocess
import sys
from os import path

if "LIBCRUNCH_BASE" in os.environ:
    LIBCRUNCH_BASE = os.environ["LIBCRUNCH_BASE"]
else:
    LIBCRUNCH_BASE = path.realpath(path.join(path.dirname(__file__), "../../.."))

sys.path.append(path.join(path.dirname(__file__), "../lib"))
sys.path.append(os.path.join(LIBCRUNCH_BASE, "frontend/c/lib"))
from crunchcc import CrunchCC
from allocscompilerwrapper import AllocsCompilerWrapper
from allocscc import AllocsCC
from clangallocscc import ClangAllocsCC

class ClangCrunchCC(ClangAllocsCC, CrunchCC):

    def getClangArgs(self, sourceFiles):
        return ClangAllocsCC.getClangArgs(self, sourceFiles) \
            + (["-include", \
                 path.join(LIBCRUNCH_BASE, "include/libcrunch_cil_inlines.h")] \
                 if (len(sourceFiles) > 0 and self.areAllSourceFilesC(sourceFiles)) else [])

    def getUnderlyingCompilerCommand(self, sourceFiles):
        return [self.getClangPath(), "-fsanitize=crunch"] + \
            self.getIncludeArgs(sourceFiles) + \
            self.getClangArgs(sourceFiles)

if __name__ == '__main__':
    wrapper = ClangCrunchCC()
    ret = wrapper.main()
    exit(ret)
