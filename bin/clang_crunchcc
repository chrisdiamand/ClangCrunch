#!/usr/bin/env python

# Compiler wrapper for libcrunch.
import os
import subprocess
import sys
from os import path

if "LIBCRUNCH_BASE" in os.environ:
    LIBCRUNCH_BASE = os.environ["LIBCRUNCH_BASE"]
else:
    LIBCRUNCH_BASE = path.join(path.dirname(__file__), "../../libcrunch")
    LIBCRUNCH_BASE = path.realpath(LIBCRUNCH_BASE)

from ClangAllocsCC import ClangAllocsCC

class ClangCrunchCC(ClangAllocsCC):

    def fixupDotO(self, filename, errfile):
        # also link the file with the uniqtypes it references
        cmd = [self.getLibAllocsBaseDir() + "/tools/lang/c/bin/link-used-types", filename]
        self.debugMsg("Calling " + " ".join(cmd) + "\n")

        errfilename = os.path.realpath(filename) + ".fixuplog"

        with (self.makeErrFile(errfilename, "w+") if not errfile else errfile) as errfile:
            ret = subprocess.call(cmd, stderr=errfile)
            if ret != 0:
                self.print_errors(errfile)
                return ret  # give up now

            return ClangAllocsCC.fixupDotO(self, filename, errfile)

    def getClangArgs(self, sourceFiles):
        args = ClangAllocsCC.getClangArgs(self, sourceFiles)
        args += ["-include",
                 path.join(LIBCRUNCH_BASE, "include/libcrunch_cil_inlines.h")]
        return args

    def getUnderlyingCompilerCommand(self, srcFiles):
        return ["clang", "-fsanitize=crunch"] + self.getClangArgs(srcFiles)

    def getLibNameStem(self):
        return "crunch"

    def getLinkPath(self):
        return path.realpath(path.join(LIBCRUNCH_BASE, "lib"))

if __name__ == '__main__':
    wrapper = ClangCrunchCC()
    ret = wrapper.main()
    exit(ret)
