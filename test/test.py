#!/usr/bin/env python3

from os import path
import os
import re
import subprocess
import sys

TESTDIR = path.realpath(path.dirname(__file__))

if "LIBALLOCS_BASE" in os.environ:
    LIBALLOCS_BASE = os.environ["LIBALLOCS_BASE"]
else:
    LIBALLOCS_BASE = path.join(TESTDIR, "../crunch/liballocs")
LIBALLOCS_BASE = path.realpath(LIBALLOCS_BASE)

if "LIBCRUNCH_BASE" in os.environ:
    LIBCRUNCH_BASE = os.environ["LIBCRUNCH_BASE"]
else:
    LIBCRUNCH_BASE = path.join(LIBALLOCS_BASE, "../libcrunch")
LIBCRUNCH_BASE = path.realpath(LIBCRUNCH_BASE)

CLEAN_EXTS = ["-allocsites.c", "-allocsites.so", "-types.c", "-types.c.log.gz",
              "-types.so", ".allocs", ".allocs.rej", ".allocstubs.c",
              ".allocstubs.i", ".allocstubs.o", ".cil.c", ".cil.i", ".cil.s",
              ".i", ".i.allocs", ".makelog", ".o", ".o.fixuplog", ".objallocs",
              ".s", ".srcallocs", ".srcallocs.rej"]

def runWithEnv(cmd, env = {}):
    assigns = ["%s='%s'" % (e, env[e]) for e in env]
    print(" ".join(assigns + cmd))
    wholeEnv = dict(os.environ)
    wholeEnv.update(env)
    proc = subprocess.Popen(cmd, stdout = subprocess.PIPE,
                            stderr =  subprocess.PIPE, env = wholeEnv)
    (stdout, stderr) = proc.communicate()
    returncode = proc.wait()

    stdout = stdout.decode()
    stderr = stderr.decode()

    if returncode != 0:
        print("Command exited with status", returncode, ":")
        print("   ", " ".join(assigns + cmd))
        print("stdout:")
        print(stdout)
        print("\nstderr:")
        print(stderr)

    return (returncode, stdout, stderr)

def parseSummaryLine(line):
    found = False
    ret = {}
    def check(name, match):
        nonlocal found, ret
        if found: # Avoid rechecking once we've found a match for this line
            return
        m = re.match(match + ":?\\s+([0-9]+)", line)
        if m:
            found = True
            ret = {name: int(m.group(1))}

    # Crunch summary outputs
    check("c.begun", "checks begun")
    check("c.aborted_typename", "checks aborted for bad typename")
    check("c.remaining", "checks remaining")
    check("c.lazy_heap", "of which did lazy heap type assignment")
    check("c.failed_alloc", "checks failed inside allocation functions")
    check("c.failed_other", "checks failed otherwise")
    check("c.failed_suppression", "of which user suppression list matched")
    check("c.nontriv", "checks nontrivially passed")
    check("c.hit_cache", "of which hit __is_a cache")

    # Allocs summary outputs
    check("a.abort_heap", "queries aborted for unindexed heap")
    check("a.abort_stack", "queries aborted for unknown stackframes")
    check("a.abort_static", "queries aborted for unknown static obj")
    check("a.abort_storage", "queries aborted for unknown storage")
    check("a.heap", "queries handled by heap case")
    check("a.stack", "queries handled by stack case")
    check("a.static", "queries handled by static case")

    return ret

# Parse the summary generated by libcrunch and liballocs
def parseSummary(output):
    lines = output.splitlines()
    ret = {}
    for l in lines:
        ret.update(parseSummaryLine(l.strip()))
    print(ret)
    return ret

class Test:
    def run(self):
        self.clean()

        cmdout = runWithEnv(self.getBuildCmd(), self.getBuildEnv())
        if cmdout[0] != 0: # Return status
            return cmdout[0]

        cmdout = runWithEnv(self.getRunCmd(), self.getRunEnv())
        parseSummary(cmdout[2])
        return cmdout[0]

    def getCleanFiles(self):
        return []

    def getBuildEnv(self):
        return {}

    def getRunEnv(self):
        return {}

    def clean(self):
        for f in self.getCleanFiles():
            if path.exists(f):
                os.unlink(f)

class AllocsTest(Test):
    def __init__(self, fname, buildEnv = {}, runEnv = {},
                 fail = False, flags = []):
        self.testName = path.splitext(fname)[0]
        self.src_fname = path.realpath(path.join(TESTDIR, fname))
        self.out_fname = path.splitext(self.src_fname)[0]
        self.buildEnv = buildEnv
        self.runEnv = runEnv
        self.shouldFail = fail
        self.flags = flags

    def getCompiler(self):
        return "clang_allocscc"

    def getName(self):
        return self.testName

    def getBuildCmd(self):
        cmd = [self.getCompiler()]
        cmd += ["-std=c99", "-DUSE_STARTUP_BRK"]
        cmd += self.flags
        cmd += [self.src_fname, "-o", self.out_fname]
        return cmd

    def getBuildEnv(self):
        return self.buildEnv

    def getRunEnv(self):
        liballocs = path.join(LIBALLOCS_BASE, "lib/liballocs_preload.so")
        self.runEnv["LD_PRELOAD"] = path.realpath(liballocs)
        return self.runEnv

    def getRunCmd(self):
        return [self.out_fname]

    def getCleanFiles(self):
        files = [self.out_fname + e for e in CLEAN_EXTS]
        files += [path.splitext(self.src_fname)[0] + e for e in CLEAN_EXTS]
        files += [self.out_fname]

        if "ALLOCSITES_BASE" in os.environ:
            sites = os.environ["ALLOCSITES_BASE"]
        else:
            sites = "/usr/lib/allocsites"
        sites = path.realpath(sites)
        sites = sites + path.realpath(self.out_fname)
        files += [sites + e for e in CLEAN_EXTS]

        return files

class StockAllocsTest(AllocsTest):
    def getBuildCmd(self):
        cmd = AllocsTest.getBuildCmd(self)
        # Without this argument there are "undefined reference to
        # `local_accessors'" errors.
        cmd = [cmd[0], "-gstrict-dwarf"] + cmd[1:]
        return cmd

    def getCompiler(self):
        return "allocscc"

    def getName(self):
        return "stock/" + AllocsTest.getName(self)

class CrunchTest(AllocsTest):
    def getCompiler(self):
        return "clang_crunchcc"

    def getBuildCmd(self):
        cmd = [self.getCompiler()]
        cmd += ["-D_GNU_SOURCE", "-std=c99", "-DUSE_STARTUP_BRK"]
        cmd += ["-I" + path.join(LIBCRUNCH_BASE, "include")]
        cmd += self.flags
        cmd += [self.src_fname, "-o", self.out_fname]
        return cmd

    def getRunEnv(self):
        liballocs = path.join(LIBCRUNCH_BASE, "lib/libcrunch_preload.so")
        self.runEnv["LD_PRELOAD"] = path.realpath(liballocs)
        return self.runEnv

class StockCrunchTest(CrunchTest):
    def getBuildCmd(self):
        cmd = CrunchTest.getBuildCmd(self)
        cmd = [cmd[0], "-gstrict-dwarf"] + cmd[1:]
        return cmd

    def getCompiler(self):
        return "crunchcc"

    def getName(self):
        return "stock/" + CrunchTest.getName(self)

def register_tests():
    tests = {}
    def add(t):
        assert isinstance(t, Test)
        name = t.getName()
        if name in tests:
            print("Error: Test '%s' already exists." % name)
        else:
            tests[t.getName()] = t

    def addAllocsTest(t):
        add(AllocsTest(t))
        add(StockAllocsTest(t))

    def addCrunchTest(t, buildEnv = {}, runEnv = {},
                      fail = False, flags = []):
        add(CrunchTest(t, buildEnv = buildEnv, runEnv = runEnv,
                       fail = fail, flags = flags))
        add(StockCrunchTest(t, buildEnv = buildEnv, runEnv = runEnv,
                            fail = fail, flags = flags))

    addAllocsTest("allocs/offsetof_composite.c")
    addAllocsTest("allocs/offsetof_simple.c")
    addAllocsTest("allocs/simple.c")

    addCrunchTest("crunch/array.c")
    addCrunchTest("crunch/function_refines.c")
    addCrunchTest("crunch/funptr.c",
                  buildEnv = {"LIBCRUNCH_SLOPPY_FUNCTION_POINTERS": "1"})
    addCrunchTest("crunch/heap.c")
    addCrunchTest("crunch/indirect.c", flags = ["-O0"])
    addCrunchTest("crunch/qualified_char.c")
    addCrunchTest("crunch/fail/funptr.c", fail = True)
    addCrunchTest("crunch/fail/va_arg.c", fail = True)
    addCrunchTest("crunch/fail/voidptrptr_invalid.c", fail = True)
    addCrunchTest("crunch/fail/voidptrptr_strict.c", fail = True)

    return tests

def zshcomp(tests, prefix = ""):
    tests = list(tests) + ["ALL", "CLEAN"]
    tests.sort()
    for t in tests:
        print(prefix, t)

def helpAndExit(tests):
    print("Usage: %s TEST ..." % sys.argv[0])
    print("Available tests:")
    zshcomp(tests, prefix = "   ")
    sys.exit(0)

def main():
    tests = register_tests()

    if "ZSHCOMP" in sys.argv:
        zshcomp(tests)
        sys.exit(0)

    if "CLEAN" in sys.argv:
        for t in tests:
            tests[t].clean()
        for f in os.listdir(TESTDIR):
            fullpath = path.join(TESTDIR, f)
            print(fullpath)
            for e in CLEAN_EXTS:
                if fullpath.endswith(e) and path.exists(fullpath):
                    os.unlink(fullpath)
        return 0

    testNames = sys.argv[1:]

    if len(testNames) == 0:
        helpAndExit(tests)

    if "ALL" in testNames:
        testNames = list(tests.keys())

    nonexist = 0
    passed = 0
    failed = 0
    failedTests = []
    total = len(testNames)

    for tn in testNames:
        if tn in tests:
            if tests[tn].run() != 0:
                failed += 1
                failedTests += [tn]
            else:
                passed += 1
        else:
            print("Error: No such test: \'" + tn + "\'")
            nonexist += 1

    print()
    print("Summary:")
    print("    Passed :", passed)
    print("    Failed :", failed)
    print("    Invalid:", nonexist)
    print("    Total  :", total)

    if failed > 0:
        print("Failed tests:", " ".join(failedTests))

if __name__ == "__main__":
    main()
